# -*- coding: utf-8 -*-
"""test_lmm_web

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10cegywD56D6yDj9kofWjmxO9jff8V4AN
"""

# !pip3 install -q -U bitsandbytes==0.42.0
# !pip3 install -q -U peft==0.8.2
# !pip3 install -q -U trl==0.7.10
# !pip3 install -q -U accelerate==0.27.1
# !pip3 install -q -U datasets==2.17.0
!pip3 install -q -U transformers==4.38.0

# Load model directly
from transformers import AutoTokenizer,AutoModelForCausalLM,pipeline


tokenizer = AutoTokenizer.from_pretrained("ibrainf/Llama-2-7b-agri-finetune")
model = AutoModelForCausalLM.from_pretrained("ibrainf/Llama-2-7b-agri-finetune", torch_dtype="auto", device_map="auto")

!pip install flask-ngrok
!pip install pyngrok
!ngrok authtoken "YOUR-API-KEY"

# pipe = pipeline(task="text-generation", model=model, tokenizer=tokenizer, max_length=100)

# import pyngrok
# from pyngrok import ngrok
# from flask import Flask, request
# from transformers import pipeline
# from flask import Flask, request, jsonify
# from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline

# app = Flask(__name__)


# pipe = pipeline(task="text-generation", model=model, tokenizer=tokenizer, max_length=100)


# @app.route("/", methods=["GET", "POST"])
# def generate_text():
#     if request.method == "POST":
#
#         prompt = request.form.get("prompt", "")
#         if not prompt:
#             return "Please provide a prompt!"

#
#         result = pipe(f"<s>[INST] {prompt} [/INST]", max_length=50)
#         generated_text = result[0]['generated_text']
#         return f"Generated Text: {generated_text}"

#
#     return '''
#         <form method="POST">
#             <label for="prompt">Enter your prompt:</label><br>
#             <input type="text" id="prompt" name="prompt" required><br><br>
#             <input type="submit" value="Generate">
#         </form>
#     '''


# if __name__ == "__main__":
#     public_url = ngrok.connect(5000).public_url
#     print(f"Public URL: {public_url}")
#     app.run(port=5000)

# import pyngrok
# from pyngrok import ngrok
# from flask import Flask, request, render_template_string
# from transformers import pipeline


# app = Flask(__name__)


# pipe = pipeline(task="text-generation", model=model, tokenizer=tokenizer, max_length=100)


# HTML_CODE = '''
# <!DOCTYPE html>
# <html lang="en">
# <head>
#     <meta charset="UTF-8">
#     <meta name="viewport" content="width=device-width, initial-scale=1.0">
#     <title>Chatbot</title>
#     <style>
#         body {
#             font-family: Arial, sans-serif;
#             background-color: #f4f4f9;
#             margin: 0;
#             padding: 0;
#             display: flex;
#             justify-content: center;
#             align-items: center;
#             height: 100vh;
#         }
#         .chat-container {
#             width: 400px;
#             background: #fff;
#             box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
#             border-radius: 8px;
#             overflow: hidden;
#         }
#         .chat-header {
#             background: #007bff;
#             color: #fff;
#             padding: 10px;
#             text-align: center;
#             font-size: 18px;
#         }
#         .chat-messages {
#             padding: 10px;
#             height: 300px;
#             overflow-y: auto;
#             background: #f9f9f9;
#             border-bottom: 1px solid #ddd;
#         }
#         .chat-input {
#             display: flex;
#             padding: 10px;
#             background: #f4f4f9;
#         }
#         .chat-input input {
#             flex: 1;
#             padding: 10px;
#             border: 1px solid #ddd;
#             border-radius: 4px;
#             font-size: 16px;
#         }
#         .chat-input button {
#             padding: 10px 15px;
#             margin-left: 10px;
#             border: none;
#             background: #007bff;
#             color: #fff;
#             font-size: 16px;
#             border-radius: 4px;
#             cursor: pointer;
#         }
#         .chat-input button:hover {
#             background: #0056b3;
#         }
#         .message {
#             margin-bottom: 10px;
#         }
#         .user-message {
#             text-align: right;
#         }
#         .bot-message {
#             text-align: left;
#         }
#     </style>
# </head>
# <body>
#     <div class="chat-container">
#         <div class="chat-header">Chatbot</div>
#         <div class="chat-messages" id="chat-messages"></div>
#         <div class="chat-input">
#             <input type="text" id="user-input" placeholder="Type your message...">
#             <button onclick="sendMessage()">Send</button>
#         </div>
#     </div>

#     <script>
#         async function sendMessage() {
#             const userInput = document.getElementById('user-input').value;
#             if (!userInput) return;

#             const chatMessages = document.getElementById('chat-messages');

#             // Add user message to chat
#             const userMessage = document.createElement('div');
#             userMessage.className = 'message user-message';
#             userMessage.textContent = userInput;
#             chatMessages.appendChild(userMessage);

#             // Scroll to bottom
#             chatMessages.scrollTop = chatMessages.scrollHeight;

#             // Send user input to server
#             const response = await fetch('/', {
#                 method: 'POST',
#                 headers: { 'Content-Type': 'application/json' },
#                 body: JSON.stringify({ prompt: userInput })
#             });

#             const result = await response.json();

#             // Add bot message to chat
#             const botMessage = document.createElement('div');
#             botMessage.className = 'message bot-message';
#             botMessage.textContent = result.generated_text;
#             chatMessages.appendChild(botMessage);

#             // Scroll to bottom
#             chatMessages.scrollTop = chatMessages.scrollHeight;

#             // Clear input
#             document.getElementById('user-input').value = '';
#         }
#     </script>
# </body>
# </html>
# '''

# @app.route("/", methods=["GET", "POST"])
# def chatbot():
#     if request.method == "POST":
#         data = request.get_json()
#         prompt = data.get("prompt", "")
#         if not prompt:
#             return {"error": "No prompt provided!"}, 400

#         result = pipe(f"<s>[INST] {prompt} [/INST]", max_length=50)
#         generated_text = result[0]['generated_text']


#         cleaned_text = generated_text.split("[/INST]")[-1].strip()

#         return {"generated_text": cleaned_text}

#     return render_template_string(HTML_CODE)

# if __name__ == "__main__":
#     public_url = ngrok.connect(5000).public_url
#     print(f"Public URL: {public_url}")
#     app.run(port=5000)

# from pyngrok import ngrok
# from flask import Flask, request, render_template_string
# from transformers import pipeline

# # إعداد Flask
# app = Flask(__name__)

# # إعداد نموذج الذكاء الاصطناعي
# pipe = pipeline(task="text-generation", model=model, tokenizer=tokenizer, max_length=100)

# # كود HTML محسّن
# HTML_CODE = '''
# <!DOCTYPE html>
# <html lang="en">
# <head>
#     <meta charset="UTF-8">
#     <meta name="viewport" content="width=device-width, initial-scale=1.0">
#     <title>Agriculture Chatbot</title>
#     <style>
#         body {
#             font-family: Arial, sans-serif;
#             background-image: url('https://source.unsplash.com/1600x900/?farm,field');
#             background-size: cover;
#             margin: 0;
#             padding: 0;
#             color: #333;
#             display: flex;
#             justify-content: center;
#             align-items: center;
#             height: 100vh;
#         }
#         .chat-container {
#             width: 400px;
#             background: rgba(255, 255, 255, 0.9);
#             box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
#             border-radius: 8px;
#             overflow: hidden;
#         }
#         .chat-header {
#             background: #28a745;
#             color: #fff;
#             padding: 10px;
#             text-align: center;
#             font-size: 18px;
#             font-weight: bold;
#         }
#         .chat-messages {
#             padding: 10px;
#             height: 300px;
#             overflow-y: auto;
#             background: #f9f9f9;
#             border-bottom: 1px solid #ddd;
#         }
#         .chat-input {
#             display: flex;
#             padding: 10px;
#             background: #f4f4f9;
#         }
#         .chat-input input {
#             flex: 1;
#             padding: 10px;
#             border: 1px solid #ddd;
#             border-radius: 4px;
#             font-size: 16px;
#         }
#         .chat-input button {
#             padding: 10px 15px;
#             margin-left: 10px;
#             border: none;
#             background: #28a745;
#             color: #fff;
#             font-size: 16px;
#             border-radius: 4px;
#             cursor: pointer;
#         }
#         .chat-input button:hover {
#             background: #218838;
#         }
#         .message {
#             margin-bottom: 10px;
#         }
#         .user-message {
#             text-align: right;
#             color: #007bff;
#         }
#         .bot-message {
#             text-align: left;
#             color: #28a745;
#         }
#     </style>
# </head>
# <body>
#     <div class="chat-container">
#         <div class="chat-header">Agriculture Chatbot</div>
#         <div class="chat-messages" id="chat-messages"></div>
#         <div class="chat-input">
#             <input type="text" id="user-input" placeholder="Type your message...">
#             <button onclick="sendMessage()">Send</button>
#         </div>
#     </div>

#     <script>
#         async function sendMessage() {
#             const userInput = document.getElementById('user-input').value;
#             if (!userInput) return;

#             const chatMessages = document.getElementById('chat-messages');

#             // Add user message to chat
#             const userMessage = document.createElement('div');
#             userMessage.className = 'message user-message';
#             userMessage.textContent = userInput;
#             chatMessages.appendChild(userMessage);

#             // Scroll to bottom
#             chatMessages.scrollTop = chatMessages.scrollHeight;

#             // Send user input to server
#             const response = await fetch('/', {
#                 method: 'POST',
#                 headers: { 'Content-Type': 'application/json' },
#                 body: JSON.stringify({ prompt: userInput })
#             });

#             const result = await response.json();

#             // Add bot message to chat
#             const botMessage = document.createElement('div');
#             botMessage.className = 'message bot-message';
#             botMessage.textContent = result.generated_text;
#             chatMessages.appendChild(botMessage);

#             // Scroll to bottom
#             chatMessages.scrollTop = chatMessages.scrollHeight;

#             // Clear input
#             document.getElementById('user-input').value = '';
#         }
#     </script>
# </body>
# </html>
# '''

# # إعداد مسارات Flask
# @app.route("/", methods=["GET", "POST"])
# def chatbot():
#     if request.method == "POST":
#         data = request.get_json()
#         prompt = data.get("prompt", "")
#         if not prompt:
#             return {"error": "No prompt provided!"}, 400

#         # توليد نص من نموذج الذكاء الاصطناعي
#         result = pipe(f"<s>[INST] {prompt} [/INST]", max_length=50)
#         generated_text = result[0]['generated_text']

#         # تنظيف النص
#         cleaned_text = generated_text.split("[/INST]")[-1].strip()

#         return {"generated_text": cleaned_text}

#     return render_template_string(HTML_CODE)

# # بدء ngrok وتشغيل Flask
# if __name__ == "__main__":
#     public_url = ngrok.connect(5000).public_url
#     print(f"Public URL: {public_url}")
#     app.run(port=5000)

# from pyngrok import ngrok
# from flask import Flask, request, render_template_string
# from transformers import pipeline

# # إعداد Flask
# app = Flask(__name__)

# # إعداد نموذج الذكاء الاصطناعي
# pipe = pipeline(task="text-generation", model=model, tokenizer=tokenizer, max_length=100)

# # كود HTML محسّن مع صور وألوان
# HTML_CODE = '''
# <!DOCTYPE html>
# <html lang="en">
# <head>
#     <meta charset="UTF-8">
#     <meta name="viewport" content="width=device-width, initial-scale=1.0">
#     <title>Agriculture Chatbot</title>
#     <style>
#         body {
#             font-family: Arial, sans-serif;
#             background-image: url('https://source.unsplash.com/1600x900/?farm,agriculture');
#             background-size: cover;
#             margin: 0;
#             padding: 0;
#             color: #333;
#             display: flex;
#             justify-content: center;
#             align-items: center;
#             height: 100vh;
#         }
#         .chat-container {
#             width: 400px;
#             background: rgba(255, 255, 255, 0.95);
#             box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
#             border-radius: 8px;
#             overflow: hidden;
#             position: relative;
#         }
#         .chat-header {
#             background: #28a745;
#             color: #fff;
#             padding: 15px;
#             text-align: center;
#             font-size: 20px;
#             font-weight: bold;
#             display: flex;
#             align-items: center;
#             justify-content: center;
#         }
#         .chat-header img {
#             width: 30px;
#             height: 30px;
#             margin-right: 10px;
#         }
#         .chat-messages {
#             padding: 10px;
#             height: 300px;
#             overflow-y: auto;
#             background: #f9f9f9;
#             border-bottom: 1px solid #ddd;
#         }
#         .chat-input {
#             display: flex;
#             padding: 10px;
#             background: #f4f4f9;
#         }
#         .chat-input input {
#             flex: 1;
#             padding: 10px;
#             border: 1px solid #ddd;
#             border-radius: 4px;
#             font-size: 16px;
#         }
#         .chat-input button {
#             padding: 10px 15px;
#             margin-left: 10px;
#             border: none;
#             background: #28a745;
#             color: #fff;
#             font-size: 16px;
#             border-radius: 4px;
#             cursor: pointer;
#         }
#         .chat-input button:hover {
#             background: #218838;
#         }
#         .message {
#             margin-bottom: 10px;
#         }
#         .user-message {
#             text-align: right;
#             color: #007bff;
#         }
#         .bot-message {
#             text-align: left;
#             color: #28a745;
#         }
#     </style>
# </head>
# <body>
#     <div class="chat-container">
#         <div class="chat-header">
#             <img src="https://img.icons8.com/color/48/000000/plant.png" alt="Logo">
#             Agriculture Chatbot
#         </div>
#         <div class="chat-messages" id="chat-messages"></div>
#         <div class="chat-input">
#             <input type="text" id="user-input" placeholder="Type your message...">
#             <button onclick="sendMessage()">Send</button>
#         </div>
#     </div>

#     <script>
#         async function sendMessage() {
#             const userInput = document.getElementById('user-input').value;
#             if (!userInput) return;

#             const chatMessages = document.getElementById('chat-messages');

#             // Add user message to chat
#             const userMessage = document.createElement('div');
#             userMessage.className = 'message user-message';
#             userMessage.textContent = userInput;
#             chatMessages.appendChild(userMessage);

#             // Scroll to bottom
#             chatMessages.scrollTop = chatMessages.scrollHeight;

#             // Send user input to server
#             const response = await fetch('/', {
#                 method: 'POST',
#                 headers: { 'Content-Type': 'application/json' },
#                 body: JSON.stringify({ prompt: userInput })
#             });

#             const result = await response.json();

#             // Add bot message to chat
#             const botMessage = document.createElement('div');
#             botMessage.className = 'message bot-message';
#             botMessage.textContent = result.generated_text;
#             chatMessages.appendChild(botMessage);

#             // Scroll to bottom
#             chatMessages.scrollTop = chatMessages.scrollHeight;

#             // Clear input
#             document.getElementById('user-input').value = '';
#         }
#     </script>
# </body>
# </html>
# '''

# # إعداد مسارات Flask
# @app.route("/", methods=["GET", "POST"])
# def chatbot():
#     if request.method == "POST":
#         data = request.get_json()
#         prompt = data.get("prompt", "")
#         if not prompt:
#             return {"error": "No prompt provided!"}, 400

#         # توليد نص من نموذج الذكاء الاصطناعي
#         result = pipe(f"<s>[INST] {prompt} [/INST]", max_length=50)
#         generated_text = result[0]['generated_text']

#         # تنظيف النص
#         cleaned_text = generated_text.split("[/INST]")[-1].strip()

#         return {"generated_text": cleaned_text}

#     return render_template_string(HTML_CODE)

# # بدء ngrok وتشغيل Flask
# if __name__ == "__main__":
#     public_url = ngrok.connect(5000).public_url
#     print(f"Public URL: {public_url}")
#     app.run(port=5000)

# #############gemenai1
# import pyngrok
# from pyngrok import ngrok
# from flask import Flask, request, render_template_string
# from transformers import pipeline

# app = Flask(__name__)

# pipe = pipeline(task="text-generation", model=model, tokenizer=tokenizer, max_length=100)

# HTML_CODE = """
# <!DOCTYPE html>
# <html lang="ar" dir="rtl">
# <head>
#     <meta charset="UTF-8">
#     <meta name="viewport" content="width=device-width, initial-scale=1.0">
#     <title>مساعدك الزراعي</title>
#     <style>
#         body {
#             font-family: 'Arial', sans-serif; /* أو خط عربي مناسب */
#             background-color: #f0f8f0; /* لون أخضر فاتح */
#             margin: 0;
#             padding: 0;
#             display: flex;
#             justify-content: center;
#             align-items: center;
#             min-height: 100vh; /* يضمن ملء الشاشة */
#         }
#         .chat-container {
#             width: 500px;
#             background: #fff;
#             box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
#             border-radius: 12px;
#             overflow: hidden;
#         }
#         .chat-header {
#             background: #28a745; /* لون أخضر داكن */
#             color: #fff;
#             padding: 15px;
#             text-align: center;
#             font-size: 20px;
#         }
#         .chat-messages {
#             padding: 15px;
#             height: 400px;
#             overflow-y: auto;
#             background: #f9f9f9;
#             border-bottom: 1px solid #ddd;
#             display: flex; /* إضافة مرونة لعرض الرسائل */
#             flex-direction: column; /* ترتيب الرسائل عمودياً */
#         }
#         .message {
#             margin-bottom: 10px;
#             padding: 10px;
#             border-radius: 8px;
#             max-width: 80%; /* منع الرسائل الطويلة من تجاوز الحاوية */
#             word-wrap: break-word; /* كسر الكلمات الطويلة */
#         }
#         .user-message {
#             background-color: #dcf8c6; /* لون رسائل المستخدم */
#             align-self: flex-end; /* محاذاة رسائل المستخدم إلى اليمين */
#         }
#         .bot-message {
#             background-color: #fff;
#             align-self: flex-start; /* محاذاة رسائل البوت إلى اليسار */
#             box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* ظل خفيف لرسائل البوت */
#         }
#         .chat-input {
#             display: flex;
#             padding: 15px;
#             background: #fff;
#         }
#         .chat-input input {
#             flex: 1;
#             padding: 12px;
#             border: 1px solid #ddd;
#             border-radius: 6px;
#             font-size: 16px;
#             margin-right: 10px;
#         }
#         .chat-input button {
#             padding: 12px 20px;
#             border: none;
#             background: #28a745;
#             color: #fff;
#             font-size: 16px;
#             border-radius: 6px;
#             cursor: pointer;
#             transition: background-color 0.3s ease; /* إضافة تأثير الانتقال */
#         }
#         .chat-input button:hover {
#             background: #1e7e34;
#         }

#     </style>
# </head>
# <body>
#     <div class="chat-container">
#         <div class="chat-header">مساعدك الزراعي</div>
#         <div class="chat-messages" id="chat-messages"></div>
#         <div class="chat-input">
#             <input type="text" id="user-input" placeholder="اكتب سؤالك...">
#             <button onclick="sendMessage()">إرسال</button>
#         </div>
#     </div>

#     <script>
#      async function sendMessage() {
#             const userInput = document.getElementById('user-input').value;
#             if (!userInput) return;

#             const chatMessages = document.getElementById('chat-messages');

#             // Add user message to chat
#             const userMessage = document.createElement('div');
#             userMessage.className = 'message user-message';
#             userMessage.textContent = userInput;
#             chatMessages.appendChild(userMessage);

#             // Scroll to bottom
#             chatMessages.scrollTop = chatMessages.scrollHeight;

#             // Send user input to server
#             const response = await fetch('/', {
#                 method: 'POST',
#                 headers: { 'Content-Type': 'application/json' },
#                 body: JSON.stringify({ prompt: userInput })
#             });

#             const result = await response.json();

#             // Add bot message to chat
#             const botMessage = document.createElement('div');
#             botMessage.className = 'message bot-message';
#             botMessage.textContent = result.generated_text;
#             chatMessages.appendChild(botMessage);

#             // Scroll to bottom
#             chatMessages.scrollTop = chatMessages.scrollHeight;

#             // Clear input
#             document.getElementById('user-input').value = '';
#         }
#     </script>
# </body>
# </html>
# """

# @app.route("/", methods=["GET", "POST"])
# def chatbot():
#     if request.method == "POST":
#         data = request.get_json()
#         prompt = data.get("prompt", "")
#         if not prompt:
#             return {"error": "No prompt provided!"}, 400

#         # توليد نص من نموذج الذكاء الاصطناعي
#         result = pipe(f"<s>[INST] {prompt} [/INST]", max_length=50)
#         generated_text = result[0]['generated_text']

#         # تنظيف النص
#         cleaned_text = generated_text.split("[/INST]")[-1].strip()

#         return {"generated_text": cleaned_text}

#     return render_template_string(HTML_CODE)

# if __name__ == "__main__":
#     public_url = ngrok.connect(5000).public_url
#     print(f"Public URL: {public_url}")
#     app.run(port=5000)

import pyngrok
from pyngrok import ngrok
from flask import Flask, request, render_template_string, jsonify
from transformers import pipeline
import base64

app = Flask(__name__)

# نموذج اللغة
pipe = pipeline(task="text-generation", model=model, tokenizer=tokenizer, max_length=100)

# صورة الخلفية مضمنة كبيانات Base64 (تأكد من وجود الصورة في المسار الصحيح)
try:
    with open("/content/sample_data/static/images/background.webp", "rb") as image_file:
        encoded_string = base64.b64encode(image_file.read()).decode("utf-8")
    BACKGROUND_IMAGE = f"data:image/jpeg;base64,{encoded_string}"
except FileNotFoundError:
    print("خطأ: لم يتم العثور على ملف الصورة background.jpg في مجلد static/images.")
    BACKGROUND_IMAGE = ""

HTML_CODE = f"""
<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>مساعدك الزراعي</title>
    <style>
        body {{
            font-family: 'Tajawal', Arial, sans-serif;
            background-color: #eef7ee;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            {'background-image: url(' + BACKGROUND_IMAGE + ');' if BACKGROUND_IMAGE else ''}
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center;
        }}
        .chat-container {{
            width: 500px;
            max-width: 90%;
            background: rgba(255, 255, 255, 0.9);
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
            border-radius: 15px;
            overflow: hidden;
        }}
        .chat-header {{
            background: linear-gradient(90deg, #28a745, #218838);
            color: #fff;
            padding: 15px;
            text-align: center;
            font-size: 24px;
            font-weight: bold;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }}
        .chat-messages {{
            padding: 20px;
            height: 400px;
            overflow-y: auto;
            background: #f9f9f9;
            border-bottom: 1px solid #ddd;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }}
        .message {{
            margin-bottom: 10px;
            padding: 12px;
            border-radius: 12px;
            max-width: 75%;
            word-wrap: break-word;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            animation: fadeIn 0.3s ease-out;
        }}
        .user-message {{
            background-color: #d4edda;
            align-self: flex-end;
        }}
        .bot-message {{
            background-color: #f8f9fa;
            align-self: flex-start;
        }}
        @keyframes fadeIn {{
            from {{
                opacity: 0;
                transform: translateY(10px);
            }}
            to {{
                opacity: 1;
                transform: translateY(0);
            }}
        }}
        .loading {{
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
            color: #28a745;
        }}
        .loading span {{
            display: inline-block;
            animation: bounce 1.5s infinite;
        }}
        .loading span:nth-child(2) {{
            animation-delay: 0.2s;
        }}
        .loading span:nth-child(3) {{
            animation-delay: 0.4s;
        }}
        @keyframes bounce {{
            0%, 100% {{ transform: translateY(0); }}
            50% {{ transform: translateY(-10px); }}
        }}
        .chat-input {{
            padding: 15px;
            display: flex;
            gap: 10px;
            background: #fff;
        }}
        .chat-input input {{
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 8px;
            font-size: 16px;
            outline: none;
            transition: border-color 0.3s;
        }}
        .chat-input input:focus {{
            border-color: #28a745;
        }}
        .chat-input button {{
            padding: 10px 20px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s;
        }}
        .chat-input button:hover {{
            background-color: #218838;
        }}
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">مساعدك الزراعي</div>
        <div class="chat-messages" id="chat-messages"></div>
        <div class="chat-input">
            <input type="text" id="user-input" placeholder="اكتب سؤالك...">
            <button onclick="sendMessage()">إرسال</button>
        </div>
    </div>

    <script>
        async function sendMessage() {{
            const userInput = document.getElementById('user-input').value;
            if (!userInput) return;

            const chatMessages = document.getElementById('chat-messages');

            // عرض رسالة المستخدم
            const userMessageDiv = document.createElement('div');
            userMessageDiv.className = 'message user-message';
            userMessageDiv.textContent = userInput;
            chatMessages.appendChild(userMessageDiv);

            // عرض مؤشر التحميل
            const loadingDiv = document.createElement('div');
            loadingDiv.className = 'message bot-message loading';
            loadingDiv.id = 'loading-indicator';
            loadingDiv.innerHTML = '<span>.</span><span>.</span><span>.</span>';
            chatMessages.appendChild(loadingDiv);

            // تمرير إلى الأسفل
            chatMessages.scrollTop = chatMessages.scrollHeight;

            // إرسال الطلب إلى الخادم
            try {{
                const response = await fetch('/', {{
                    method: 'POST',
                    headers: {{ 'Content-Type': 'application/json' }},
                    body: JSON.stringify({{ user_message: userInput }})
                }});
                const data = await response.json();

                // إزالة مؤشر التحميل
                document.getElementById('loading-indicator').remove();

                // عرض رسالة البوت تدريجيًا
                const botMessageDiv = document.createElement('div');
                botMessageDiv.className = 'message bot-message';
                chatMessages.appendChild(botMessageDiv);

                const botResponse = data.bot_response;
                let i = 0;
                function typeEffect() {{
                    if (i < botResponse.length) {{
                        botMessageDiv.textContent += botResponse.charAt(i);
                        i++;
                        setTimeout(typeEffect, 50); // سرعة الكتابة
                    }}
                }}
                typeEffect();
            }} catch (error) {{
                console.error('خطأ أثناء إرسال الطلب:', error);
                document.getElementById('loading-indicator').remove(); // إزالة مؤشر التحميل في حالة الخطأ
            }}

            // تنظيف مربع الإدخال
            document.getElementById('user-input').value = '';
            chatMessages.scrollTop = chatMessages.scrollHeight; // تمرير للأسفل تلقائيًا
        }}
    </script>
</body>
</html>
"""
@app.route("/", methods=["GET", "POST"])
def chatbot():
    if request.method == "POST":
        try:
            data = request.get_json()
            user_message = data.get("user_message", "")
            if not user_message:
                return jsonify({"bot_response": "لم يتم إرسال رسالة صالحة."}), 400

            # توليد استجابة البوت
            result = pipe(f"<s>[INST] {user_message} [/INST]", max_length=50)
            generated_text = result[0]['generated_text']
            cleaned_text = generated_text.split("[/INST]")[-1].strip()
            return jsonify({"bot_response": cleaned_text})
        except Exception as e:
            return jsonify({"bot_response": f"حدث خطأ: {str(e)}"}), 500
    return render_template_string(HTML_CODE)

if __name__ == "__main__":
    public_url = ngrok.connect(5000).public_url
    print(f"Public URL: {public_url}")
    app.run(port=5000)
###########################################the current code

import pyngrok
from pyngrok import ngrok
from flask import Flask, request, render_template_string, jsonify
from transformers import pipeline
import base64

app = Flask(__name__)

# نموذج اللغة
pipe = pipeline(task="text-generation", model=model, tokenizer=tokenizer, max_length=50)

# صورة الخلفية مضمنة كبيانات Base64 (تأكد من وجود الصورة في المسار الصحيح)
try:
    with open("/content/sample_data/static/images/background.webp", "rb") as image_file:
        encoded_string = base64.b64encode(image_file.read()).decode("utf-8")
    BACKGROUND_IMAGE = f"data:image/jpeg;base64,{encoded_string}"
except FileNotFoundError:
    print("خطأ: لم يتم العثور على ملف الصورة background.jpg في مجلد static/images.")
    BACKGROUND_IMAGE = ""

HTML_CODE = f"""
<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>مساعدك الزراعي</title>
    <style>
        body {{
            font-family: 'Arial', sans-serif;
            background-color: #f0f8f0;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            {'background-image: url(' + BACKGROUND_IMAGE + ');' if BACKGROUND_IMAGE else ''}
            background-size: cover;
            background-repeat: no-repeat;
        }}
        .chat-container {{
            width: 500px;
            background: #fff;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            border-radius: 12px;
            overflow: hidden;
        }}
        .chat-header {{
            background: #28a745;
            color: #fff;
            padding: 15px;
            text-align: center;
            font-size: 20px;
        }}
        .chat-messages {{
            padding: 15px;
            height: 400px;
            overflow-y: auto;
            background: #f9f9f9;
            border-bottom: 1px solid #ddd;
            display: flex;
            flex-direction: column;
        }}
        .message {{
            margin-bottom: 10px;
            padding: 10px;
            border-radius: 8px;
            max-width: 80%;
            word-wrap: break-word;
        }}
        .user-message {{
            background-color: #dcf8c6;
            align-self: flex-end;
        }}
        .bot-message {{
            background-color: #f1f0f0;
            align-self: flex-start;
        }}
        .chat-input {{
            padding: 10px;
            display: flex;
        }}
        .chat-input input {{
            flex-grow: 1;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-right: 5px;
        }}
        .chat-input button {{
            padding: 8px 15px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }}
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">مساعدك الزراعي</div>
        <div class="chat-messages" id="chat-messages"></div>
        <div class="chat-input">
            <input type="text" id="user-input" placeholder="اكتب سؤالك...">
            <button onclick="sendMessage()">إرسال</button>
        </div>
    </div>

    <script>
        async function sendMessage() {{
            const userInput = document.getElementById('user-input').value;
            if (!userInput) return;

            const chatMessages = document.getElementById('chat-messages');

            // عرض رسالة المستخدم
            const userMessageDiv = document.createElement('div');
            userMessageDiv.className = 'message user-message';
            userMessageDiv.textContent = userInput;
            chatMessages.appendChild(userMessageDiv);

            // إرسال الطلب إلى الخادم
            try {{
                const response = await fetch('/', {{
                    method: 'POST',
                    headers: {{ 'Content-Type': 'application/json' }},
                    body: JSON.stringify({{ user_message: userInput }})
                }});
                const data = await response.json();

                // عرض رسالة البوت
                const botMessageDiv = document.createElement('div');
                botMessageDiv.className = 'message bot-message';
                botMessageDiv.textContent = data.bot_response;
                chatMessages.appendChild(botMessageDiv);
            }} catch (error) {{
                console.error('خطأ أثناء إرسال الطلب:', error);
            }}

            // تنظيف مربع الإدخال
            document.getElementById('user-input').value = '';
        }}
    </script>
</body>
</html>
"""

@app.route("/", methods=["GET", "POST"])
def chatbot():
    if request.method == "POST":
        try:
            data = request.get_json()
            user_message = data.get("user_message", "")
            if not user_message:
                return jsonify({"bot_response": "لم يتم إرسال رسالة صالحة."}), 400

            # توليد استجابة البوت
            result = pipe(f"<s>[INST] {user_message} [/INST]", max_length=50)
            generated_text = result[0]['generated_text']
            cleaned_text = generated_text.split("[/INST]")[-1].strip()
            return jsonify({"bot_response": cleaned_text})
        except Exception as e:
            return jsonify({"bot_response": f"حدث خطأ: {str(e)}"}), 500
    return render_template_string(HTML_CODE)

if __name__ == "__main__":
    public_url = ngrok.connect(5000).public_url
    print(f"Public URL: {public_url}")
    app.run(port=5000)
##################################################previous code

from pyngrok import ngrok
from flask import Flask, request, render_template_string, jsonify
from transformers import pipeline
import base64

app = Flask(__name__)

# نموذج اللغة
pipe = pipeline(task="text-generation", model=model, tokenizer=tokenizer, max_length=50)

# صورة الخلفية مضمنة كبيانات Base64 (تأكد من وجود الصورة في المسار الصحيح)
try:
    with open("/content/sample_data/static/images/background.webp", "rb") as image_file:
        encoded_string = base64.b64encode(image_file.read()).decode("utf-8")
    BACKGROUND_IMAGE = f"data:image/jpeg;base64,{encoded_string}"
except FileNotFoundError:
    print("خطأ: لم يتم العثور على ملف الصورة background.webp في مجلد static/images.")
    BACKGROUND_IMAGE = ""

HTML_CODE = f"""
<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>مساعدك الزراعي</title>
    <style>
        body {{
            font-family: 'Tajawal', Arial, sans-serif;
            background-color: #eef7ee;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            {'background-image: url(' + BACKGROUND_IMAGE + ');' if BACKGROUND_IMAGE else ''}
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center;
        }}
        .chat-container {{
            width: 500px;
            max-width: 90%;
            background: rgba(255, 255, 255, 0.9);
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
            border-radius: 15px;
            overflow: hidden;
        }}
        .chat-header {{
            background: linear-gradient(90deg, #28a745, #218838);
            color: #fff;
            padding: 15px;
            text-align: center;
            font-size: 24px;
            font-weight: bold;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }}
        .chat-messages {{
            padding: 20px;
            height: 400px;
            overflow-y: auto;
            background: #f9f9f9;
            border-bottom: 1px solid #ddd;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }}
        .message {{
            margin-bottom: 10px;
            padding: 12px;
            border-radius: 12px;
            max-width: 75%;
            word-wrap: break-word;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            animation: fadeIn 0.3s ease-out;
        }}
        .user-message {{
            background-color: #d4edda;
            align-self: flex-end;
        }}
        .bot-message {{
            background-color: #f8f9fa;
            align-self: flex-start;
        }}
        @keyframes fadeIn {{
            from {{
                opacity: 0;
                transform: translateY(10px);
            }}
            to {{
                opacity: 1;
                transform: translateY(0);
            }}
        }}
        .chat-input {{
            padding: 15px;
            display: flex;
            gap: 10px;
            background: #fff;
        }}
        .chat-input input {{
            flex-grow: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 8px;
            font-size: 16px;
            outline: none;
            transition: border-color 0.3s;
        }}
        .chat-input input:focus {{
            border-color: #28a745;
        }}
        .chat-input button {{
            padding: 10px 20px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s;
        }}
        .chat-input button:hover {{
            background-color: #218838;
        }}
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">مساعدك الزراعي</div>
        <div class="chat-messages" id="chat-messages"></div>
        <div class="chat-input">
            <input type="text" id="user-input" placeholder="اكتب سؤالك...">
            <button onclick="sendMessage()">إرسال</button>
        </div>
    </div>

    <script>
        async function sendMessage() {{
            const userInput = document.getElementById('user-input').value;
            if (!userInput) return;

            const chatMessages = document.getElementById('chat-messages');

            // عرض رسالة المستخدم
            const userMessageDiv = document.createElement('div');
            userMessageDiv.className = 'message user-message';
            userMessageDiv.textContent = userInput;
            chatMessages.appendChild(userMessageDiv);

            // إرسال الطلب إلى الخادم
            try {{
                const response = await fetch('/', {{
                    method: 'POST',
                    headers: {{ 'Content-Type': 'application/json' }},
                    body: JSON.stringify({{ user_message: userInput }})
                }});
                const data = await response.json();

                // عرض رسالة البوت
                const botMessageDiv = document.createElement('div');
                botMessageDiv.className = 'message bot-message';
                botMessageDiv.textContent = data.bot_response;
                chatMessages.appendChild(botMessageDiv);
            }} catch (error) {{
                console.error('خطأ أثناء إرسال الطلب:', error);
            }}

            // تنظيف مربع الإدخال
            document.getElementById('user-input').value = '';
            chatMessages.scrollTop = chatMessages.scrollHeight; // التمرير للأسفل تلقائيًا
        }}
    </script>
</body>
</html>
"""

@app.route("/", methods=["GET", "POST"])
def chatbot():
    if request.method == "POST":
        try:
            data = request.get_json()
            user_message = data.get("user_message", "")
            if not user_message:
                return jsonify({"bot_response": "لم يتم إرسال رسالة صالحة."}), 400

            # توليد استجابة البوت
            result = pipe(f"<s>[INST] {user_message} [/INST]", max_length=50)
            generated_text = result[0]['generated_text']
            cleaned_text = generated_text.split("[/INST]")[-1].strip()
            return jsonify({"bot_response": cleaned_text})
        except Exception as e:
            return jsonify({"bot_response": f"حدث خطأ: {str(e)}"}), 500
    return render_template_string(HTML_CODE)

if __name__ == "__main__":
    public_url = ngrok.connect(5000).public_url
    print(f"Public URL: {public_url}")
    app.run(port=5000)

# import pyngrok
# from pyngrok import ngrok
# from flask import Flask, request, render_template_string
# from transformers import pipeline


# app = Flask(__name__)


# pipe = pipeline(task="text-generation", model=model, tokenizer=tokenizer, max_length=100)


# HTML_CODE = '''
# <!DOCTYPE html>
# <html lang="en">
# <head>
#     <meta charset="UTF-8">
#     <meta name="viewport" content="width=device-width, initial-scale=1.0">
#     <title>Chatbot</title>
#     <style>
#         body {
#             font-family: Arial, sans-serif;
#             background-color: #f4f4f9;
#             margin: 0;
#             padding: 0;
#             display: flex;
#             justify-content: center;
#             align-items: center;
#             height: 100vh;
#         }
#         .chat-container {
#             width: 400px;
#             background: #fff;
#             box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
#             border-radius: 8px;
#             overflow: hidden;
#         }
#         .chat-header {
#             background: #007bff;
#             color: #fff;
#             padding: 10px;
#             text-align: center;
#             font-size: 18px;
#         }
#         .chat-messages {
#             padding: 10px;
#             height: 300px;
#             overflow-y: auto;
#             background: #f9f9f9;
#             border-bottom: 1px solid #ddd;
#         }
#         .chat-input {
#             display: flex;
#             padding: 10px;
#             background: #f4f4f9;
#         }
#         .chat-input input {
#             flex: 1;
#             padding: 10px;
#             border: 1px solid #ddd;
#             border-radius: 4px;
#             font-size: 16px;
#         }
#         .chat-input button {
#             padding: 10px 15px;
#             margin-left: 10px;
#             border: none;
#             background: #007bff;
#             color: #fff;
#             font-size: 16px;
#             border-radius: 4px;
#             cursor: pointer;
#         }
#         .chat-input button:hover {
#             background: #0056b3;
#         }
#         .message {
#             margin-bottom: 10px;
#         }
#         .user-message {
#             text-align: right;
#         }
#         .bot-message {
#             text-align: left;
#         }
#     </style>
# </head>
# <body>
#     <div class="chat-container">
#         <div class="chat-header">Chatbot</div>
#         <div class="chat-messages" id="chat-messages"></div>
#         <div class="chat-input">
#             <input type="text" id="user-input" placeholder="Type your message...">
#             <button onclick="sendMessage()">Send</button>
#         </div>
#     </div>

#     <script>
#         async function sendMessage() {
#             const userInput = document.getElementById('user-input').value;
#             if (!userInput) return;

#             const chatMessages = document.getElementById('chat-messages');

#             // Add user message to chat
#             const userMessage = document.createElement('div');
#             userMessage.className = 'message user-message';
#             userMessage.textContent = userInput;
#             chatMessages.appendChild(userMessage);

#             // Scroll to bottom
#             chatMessages.scrollTop = chatMessages.scrollHeight;

#             // Send user input to server
#             const response = await fetch('/', {
#                 method: 'POST',
#                 headers: { 'Content-Type': 'application/json' },
#                 body: JSON.stringify({ prompt: userInput })
#             });

#             const result = await response.json();

#             // Add bot message to chat
#             const botMessage = document.createElement('div');
#             botMessage.className = 'message bot-message';
#             botMessage.textContent = result.generated_text;
#             chatMessages.appendChild(botMessage);

#             // Scroll to bottom
#             chatMessages.scrollTop = chatMessages.scrollHeight;

#             // Clear input
#             document.getElementById('user-input').value = '';
#         }
#     </script>
# </body>
# </html>
# '''

# # تشغيل ngrok
# @app.route("/", methods=["GET", "POST"])
# def chatbot():
#     if request.method == "POST":
#         data = request.get_json()
#         prompt = data.get("prompt", "")
#         if not prompt:
#             return {"error": "No prompt provided!"}, 400

#         result = pipe(f"<s>[INST] {prompt} [/INST]", max_length=50)
#         generated_text = result[0]['generated_text']
#         return {"generated_text": generated_text}

#     return render_template_string(HTML_CODE)

# if __name__ == "__main__":
#     public_url = ngrok.connect(5000).public_url
#     print(f"Public URL: {public_url}")
#     app.run(port=5000)

prompt = "what is organic farming?"
pipe = pipeline(task="text-generation", model=model, tokenizer=tokenizer, max_length=50)
result = pipe(f"<s>[INST] {prompt} [/INST]")
print(result[0]['generated_text'])